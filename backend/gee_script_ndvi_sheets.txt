// Load the full GEDI-Sentinel sugarcane dataset
var collection = ee.ImageCollection('projects/lobell-lab/gedi_sugarcane/maps/imgColl_10m_ESAESRIGLAD');

// Filter to all tiles in the Philippines
var phTiles = collection.filter(ee.Filter.eq('country', 'philippines'));

// Load Sentinel-2 surface reflectance for NDVI computation
var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterDate('2024-01-01', '2024-12-31')
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20));

// Function to classify growth stage based on 'n_tallmonths' and NDVI
function classifyGrowthStage(nTall, ndvi) {
  return ee.Algorithms.If(
    nTall,
    ee.Algorithms.If(
      ndvi.gte(0.6).and(nTall.gte(10)), 'Grand Growth',
      ee.Algorithms.If(
        ndvi.gte(0.5).and(nTall.gte(6)), 'Ripening',
        ee.Algorithms.If(
          ndvi.gte(0.4).and(nTall.gte(3)), 'Tillering',
          ee.Algorithms.If(
            ndvi.gte(0.3).and(nTall.gte(1)), 'Germination',
            'No Sugarcane'
          )
        )
      )
    ),
    'Unknown'
  );
}

// For each tile image, process and export individually
phTiles.evaluate(function(tilesList) {
  tilesList.features.forEach(function(tileFeature, index) {
    var tileNumber = index + 1; // Start from 1

    var tileId = tileFeature.id;
    var tileImage = ee.Image(tileId);

    // Apply crop masks
    var esa = tileImage.select('ESA').eq(1).unmask(0);
    var esri = tileImage.select('ESRI').eq(1).unmask(0);
    var glad = tileImage.select('GLAD').eq(1).unmask(0);
    var combinedMask = esa.or(esri).or(glad);
    var sugarcane = tileImage.select('sugarcane').eq(1).updateMask(combinedMask);
    var maskedTile = tileImage.addBands(sugarcane.rename('sugarcane_mask'));

    // Convert sugarcane pixels to points
    var vectors = maskedTile.select('sugarcane_mask').selfMask().reduceToVectors({
      geometryType: 'centroid',
      reducer: ee.Reducer.countEvery(),
      scale: 10,
      maxPixels: 1e9
    });

    // Annotate features
    var annotated = vectors.map(function(feature) {
      var coords = feature.geometry().coordinates();
      var lat = coords.get(1);
      var lon = coords.get(0);

      var reducer = ee.Reducer.first();
      var point = feature.geometry();

      var regionProps = maskedTile.reduceRegion({
        reducer: reducer,
        geometry: point,
        scale: 10,
        bestEffort: true
      });

      var nTall = regionProps.get('n_tallmonths');

      // Fetch Sentinel-2 NDVI at the point
      var ndviAtPoint = s2.map(function(img) {
        var ndvi = img.normalizedDifference(['B8', 'B4']).rename('NDVI');
        return ndvi;
      }).mean().reduceRegion({
        reducer: ee.Reducer.first(),
        geometry: point,
        scale: 10,
        bestEffort: true
      }).get('NDVI');

      var stage = classifyGrowthStage(ee.Number(nTall), ee.Number(ndviAtPoint));

      return feature.set({
        'lat': lat,
        'lng': lon,
        'n_tallmonths': nTall,
        'ndvi': ndviAtPoint,
        'growth_stage': stage
      });
    });

    // Only export if annotated has features
    annotated.size().evaluate(function(count) {
      if (count > 0) {
        print('Exporting tile ' + tileNumber + ' with ' + count + ' points.');
        Export.table.toDrive({  // <-- THIS IS THE CHANGE
          collection: annotated,
          description: 'ndvi_tile_' + tileNumber,
          fileNamePrefix: 'tile_' + tileNumber,
          fileFormat: 'CSV',
          selectors: ['lat', 'lng', 'n_tallmonths', 'ndvi', 'growth_stage'],
          driveFolder: 'HR-SAGE Data' // ← Important
        });
        // Note: Still exporting as CSV because GEE cannot natively export directly to Sheets.
        // BUT: Setup an AppScript / automation in Google Drive that **auto-imports** CSVs into Sheets.
        // Or use Python backend to upload them as Sheets immediately after download.
      } else {
        print('Skipping tile ' + tileNumber + ' (no sugarcane points detected).');
      }
    });

  });
});
