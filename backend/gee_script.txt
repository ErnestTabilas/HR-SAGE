// =========================================================
// Load GEDI-Sentinel sugarcane tiles
// =========================================================
var collection = ee.ImageCollection('projects/lobell-lab/gedi_sugarcane/maps/imgColl_10m_ESAESRIGLAD');
var phTiles = collection.filter(ee.Filter.eq('country', 'philippines'));

// =========================================================
// Apply sugarcane mask from ESSD (ESA, ESRI, GLAD)
// =========================================================
var cropMasks = phTiles.map(function(image) {
  var esa = image.select('ESA').eq(1).unmask(0);
  var esri = image.select('ESRI').eq(1).unmask(0);
  var glad = image.select('GLAD').eq(1).unmask(0);
  var combinedMask = esa.or(esri).or(glad);
  
  var sugarcane = image.select('sugarcane').eq(1).updateMask(combinedMask);
  
  return image.addBands(sugarcane.rename('sugarcane_mask'));
});

// =========================================================
// Filter tiles that have at least some sugarcane
// =========================================================
var filteredTiles = cropMasks.filter(ee.Filter.gt('sugarcane_mask', 0));  // Corrected filter for sugarcane presence

// Check number of filtered tiles
print('Filtered tiles count:', filteredTiles.size());

// If there are no filtered tiles, print and do not continue
if (filteredTiles.size().getInfo() === 0) {
  print('No valid sugarcane tiles found.');
} else {
  // =========================================================
  // Sentinel-2 composites (latest 3 months)
  // =========================================================
  var start = '2024-01-01';
  var end = '2024-04-01';

  var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
    .filterBounds(phTiles.geometry())
    .filterDate(start, end)
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
    .map(function(img) {
      var ndvi = img.normalizedDifference(['B8', 'B4']).rename('NDVI');
      var evi = img.expression(
        '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
        {
          'NIR': img.select('B8'),
          'RED': img.select('B4'),
          'BLUE': img.select('B2')
        }
      ).rename('EVI');
      return img.addBands(ndvi).addBands(evi);
    });

  // Median composites
  var ndviComposite = s2.select('NDVI').median();
  var eviComposite = s2.select('EVI').median();

  // NDVI trend
  var ndviTrend = s2.select('NDVI').reduce(ee.Reducer.linearFit()).select('scale').rename('NDVI_trend');

  // NDVI entropy (texture)
  var ndviEntropy = ndviComposite.glcmTexture({size: 3}).select('NDVI_entropy');

  // Approximate month of observation
  var month = ee.Date('2024-03-01').get('month');

  // =========================================================
  // Growth Stage Classifier (ESSD sugarcane ONLY)
  // =========================================================
  function classifyGrowthStage(nTall, ndvi, evi, ndviTrend, month, entropy) {
    return ee.Algorithms.If(nTall, // If nTall exists
      ee.Algorithms.If(entropy.gt(3.0), 'Noisy/Uncertain', // High texture means unreliable
        ee.Algorithms.If(nTall.gte(10),
          ee.Algorithms.If(ndvi.gte(0.65).and(evi.gte(0.6)).and(ndviTrend.lte(0)),
            'Ripening',
            'Grand Growth'
          ),
        ee.Algorithms.If(nTall.gte(6),
          ee.Algorithms.If(ndvi.gte(0.5),
            'Tillering',
            'Germination'
          ),
        ee.Algorithms.If(nTall.gte(3),
          ee.Algorithms.If(month.lte(3),
            'Germination',
            'Tillering'
          ),
        ee.Algorithms.If(nTall.gte(1),
          'Germination',
          'No Sugarcane'
        ))))),
      'Unknown'
    );
  }

  // =========================================================
  // Loop through each tile and export CSVs
  // =========================================================
  var list = filteredTiles.toList(filteredTiles.size());
  var tileCount = list.size();
  print('Number of tiles to export:', tileCount);

  // If there are no tiles, exit early
  if (tileCount.getInfo() === 0) {
    print('No tiles to export.');
  } else {
    var exportEachTile = function(i) {
      var img = ee.Image(list.get(i));

      var sugarcaneMask = img.select('sugarcane_mask');

      var vectors = sugarcaneMask.selfMask().reduceToVectors({
        geometryType: 'centroid',
        reducer: ee.Reducer.countEvery(),
        scale: 10,
        maxPixels: 1e9
      });

      vectors = vectors.map(function(f) {
        var coords = f.geometry().coordinates();
        var lat = coords.get(1);
        var lon = coords.get(0);

        var nTall = img.select('n_tallmonths').reduceRegion({
          reducer: ee.Reducer.first(),
          geometry: f.geometry(),
          scale: 10,
          bestEffort: true
        }).get('n_tallmonths');

        var ndvi = ndviComposite.reduceRegion({
          reducer: ee.Reducer.first(),
          geometry: f.geometry(),
          scale: 10,
          bestEffort: true
        }).get('NDVI');

        var evi = eviComposite.reduceRegion({
          reducer: ee.Reducer.first(),
          geometry: f.geometry(),
          scale: 10,
          bestEffort: true
        }).get('EVI');

        var ndvi_trend = ndviTrend.reduceRegion({
          reducer: ee.Reducer.first(),
          geometry: f.geometry(),
          scale: 10,
          bestEffort: true
        }).get('NDVI_trend');

        var entropy = ndviEntropy.reduceRegion({
          reducer: ee.Reducer.first(),
          geometry: f.geometry(),
          scale: 10,
          bestEffort: true
        }).get('NDVI_entropy');

        var stage = classifyGrowthStage(
          ee.Number(nTall),
          ee.Number(ndvi),
          ee.Number(evi),
          ee.Number(ndvi_trend),
          ee.Number(month),
          ee.Number(entropy)
        );

        return f.set({
          'lat': lat,
          'lng': lon,
          'n_tallmonths': nTall,
          'ndvi': ndvi,
          'evi': evi,
          'ndvi_trend': ndvi_trend,
          'entropy': entropy,
          'growth_stage': stage
        });
      });

      // Adjusted naming: file will now be named as tile_1, tile_2, ...
      Export.table.toDrive({
        collection: vectors,
        description: 'tile_' + (i + 1), // Corrected file name
        fileFormat: 'CSV',
        selectors: ['lat', 'lng', 'n_tallmonths', 'ndvi', 'evi', 'ndvi_trend', 'entropy', 'growth_stage']
      });

      return null;
    };

    // =========================================================
    // Execute the export for all tiles
    // =========================================================
    ee.List.sequence(0, tileCount.subtract(1)).map(exportEachTile);
  }
}
